{"ast":null,"code":"var _jsxFileName = \"/Users/vishnuadithya/Documents/Projects/Movie-Site/frontend/src/components/DNA.js\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useRef } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, PerspectiveCamera } from '@react-three/drei';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DNAStrand = () => {\n  _s();\n  const strandRef = useRef();\n  useFrame(({\n    clock\n  }) => {\n    if (strandRef.current) {\n      strandRef.current.rotation.y = clock.getElapsedTime() * 0.1;\n    }\n  });\n  const dnaStrand = useMemo(() => {\n    const strand = new THREE.Group();\n    const curve = new THREE.CatmullRomCurve3([new THREE.Vector3(0, -15, 0), new THREE.Vector3(10, -7.5, 10), new THREE.Vector3(-10, 0, -10), new THREE.Vector3(10, 7.5, 10), new THREE.Vector3(0, 15, 0)]);\n    const tubeGeometry = new THREE.TubeGeometry(curve, 200, 1.5, 32, false);\n    const tubeMaterial = new THREE.MeshStandardMaterial({\n      color: 0x3C2A21,\n      metalness: 0.8,\n      roughness: 0.2\n    });\n    const tubeMesh = new THREE.Mesh(tubeGeometry, tubeMaterial);\n    strand.add(tubeMesh);\n    const sphereGeometry = new THREE.SphereGeometry(1.5, 32, 32);\n    const sphere1Material = new THREE.MeshStandardMaterial({\n      color: 0xD5CEA3,\n      metalness: 0.8,\n      roughness: 0.2\n    });\n    const sphere2Material = new THREE.MeshStandardMaterial({\n      color: 0xE5E5CB,\n      metalness: 0.8,\n      roughness: 0.2\n    });\n    for (let i = 0; i <= 100; i += 5) {\n      const t = i / 100;\n      const position = curve.getPoint(t);\n      const tangent = curve.getTangent(t);\n      const sphereMesh1 = new THREE.Mesh(sphereGeometry, sphere1Material);\n      sphereMesh1.position.copy(position).addScaledVector(tangent.cross(new THREE.Vector3(0, 1, 0)).normalize(), 3);\n      strand.add(sphereMesh1);\n      const sphereMesh2 = new THREE.Mesh(sphereGeometry, sphere2Material);\n      sphereMesh2.position.copy(position).addScaledVector(tangent.cross(new THREE.Vector3(0, 1, 0)).normalize(), -3);\n      strand.add(sphereMesh2);\n      const connectorGeometry = new THREE.CylinderGeometry(0.5, 0.5, 6, 32);\n      const connectorMaterial = new THREE.MeshStandardMaterial({\n        color: 0x1A120B,\n        metalness: 0.8,\n        roughness: 0.2\n      });\n      const connectorMesh = new THREE.Mesh(connectorGeometry, connectorMaterial);\n      connectorMesh.position.copy(position);\n      connectorMesh.quaternion.setFromUnitVectors(new THREE.Vector3(0, 1, 0), tangent.cross(new THREE.Vector3(0, 1, 0)).normalize());\n      strand.add(connectorMesh);\n    }\n    return strand;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"primitive\", {\n    object: dnaStrand,\n    ref: strandRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 10\n  }, this);\n};\n_s(DNAStrand, \"TIjYphMGfrLSEenLTpbkblyCmOs=\", false, function () {\n  return [useFrame];\n});\n_c = DNAStrand;\nconst DNA = () => {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    style: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(PerspectiveCamera, {\n      makeDefault: true,\n      position: [0, 0, 40],\n      fov: 40\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"color\", {\n      attach: \"background\",\n      args: ['#E5E5CB']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, 10, 10],\n      intensity: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [-10, -10, -10],\n      intensity: 0.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n      enableZoom: false,\n      autoRotate: true,\n      autoRotateSpeed: 0.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DNAStrand, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_c2 = DNA;\nexport default DNA;\nvar _c, _c2;\n$RefreshReg$(_c, \"DNAStrand\");\n$RefreshReg$(_c2, \"DNA\");","map":{"version":3,"names":["React","useMemo","useRef","Canvas","useFrame","OrbitControls","PerspectiveCamera","THREE","jsxDEV","_jsxDEV","DNAStrand","_s","strandRef","clock","current","rotation","y","getElapsedTime","dnaStrand","strand","Group","curve","CatmullRomCurve3","Vector3","tubeGeometry","TubeGeometry","tubeMaterial","MeshStandardMaterial","color","metalness","roughness","tubeMesh","Mesh","add","sphereGeometry","SphereGeometry","sphere1Material","sphere2Material","i","t","position","getPoint","tangent","getTangent","sphereMesh1","copy","addScaledVector","cross","normalize","sphereMesh2","connectorGeometry","CylinderGeometry","connectorMaterial","connectorMesh","quaternion","setFromUnitVectors","object","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","DNA","style","top","left","width","height","children","makeDefault","fov","attach","args","intensity","enableZoom","autoRotate","autoRotateSpeed","_c2","$RefreshReg$"],"sources":["/Users/vishnuadithya/Documents/Projects/Movie-Site/frontend/src/components/DNA.js"],"sourcesContent":["import React, { useMemo, useRef } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, PerspectiveCamera } from '@react-three/drei';\nimport * as THREE from 'three';\n\nconst DNAStrand = () => {\n  const strandRef = useRef();\n\n  useFrame(({ clock }) => {\n    if (strandRef.current) {\n      strandRef.current.rotation.y = clock.getElapsedTime() * 0.1;\n    }\n  });\n\n  const dnaStrand = useMemo(() => {\n    const strand = new THREE.Group();\n    const curve = new THREE.CatmullRomCurve3([\n      new THREE.Vector3(0, -15, 0),\n      new THREE.Vector3(10, -7.5, 10),\n      new THREE.Vector3(-10, 0, -10),\n      new THREE.Vector3(10, 7.5, 10),\n      new THREE.Vector3(0, 15, 0),\n    ]);\n\n    const tubeGeometry = new THREE.TubeGeometry(curve, 200, 1.5, 32, false);\n    const tubeMaterial = new THREE.MeshStandardMaterial({\n      color: 0x3C2A21,\n      metalness: 0.8,\n      roughness: 0.2,\n    });\n    const tubeMesh = new THREE.Mesh(tubeGeometry, tubeMaterial);\n    strand.add(tubeMesh);\n\n    const sphereGeometry = new THREE.SphereGeometry(1.5, 32, 32);\n    const sphere1Material = new THREE.MeshStandardMaterial({\n      color: 0xD5CEA3,\n      metalness: 0.8,\n      roughness: 0.2,\n    });\n    const sphere2Material = new THREE.MeshStandardMaterial({\n      color: 0xE5E5CB,\n      metalness: 0.8,\n      roughness: 0.2,\n    });\n\n    for (let i = 0; i <= 100; i += 5) {\n      const t = i / 100;\n      const position = curve.getPoint(t);\n      const tangent = curve.getTangent(t);\n\n      const sphereMesh1 = new THREE.Mesh(sphereGeometry, sphere1Material);\n      sphereMesh1.position.copy(position).addScaledVector(tangent.cross(new THREE.Vector3(0, 1, 0)).normalize(), 3);\n      strand.add(sphereMesh1);\n\n      const sphereMesh2 = new THREE.Mesh(sphereGeometry, sphere2Material);\n      sphereMesh2.position.copy(position).addScaledVector(tangent.cross(new THREE.Vector3(0, 1, 0)).normalize(), -3);\n      strand.add(sphereMesh2);\n\n      const connectorGeometry = new THREE.CylinderGeometry(0.5, 0.5, 6, 32);\n      const connectorMaterial = new THREE.MeshStandardMaterial({\n        color: 0x1A120B,\n        metalness: 0.8,\n        roughness: 0.2,\n      });\n      const connectorMesh = new THREE.Mesh(connectorGeometry, connectorMaterial);\n      connectorMesh.position.copy(position);\n      connectorMesh.quaternion.setFromUnitVectors(new THREE.Vector3(0, 1, 0), tangent.cross(new THREE.Vector3(0, 1, 0)).normalize());\n      strand.add(connectorMesh);\n    }\n\n    return strand;\n  }, []);\n\n  return <primitive object={dnaStrand} ref={strandRef} />;\n};\n\nconst DNA = () => {\n  return (\n    <Canvas style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\n      <PerspectiveCamera makeDefault position={[0, 0, 40]} fov={40} />\n      <color attach=\"background\" args={['#E5E5CB']} />\n      <ambientLight intensity={0.5} />\n      <pointLight position={[10, 10, 10]} intensity={1} />\n      <pointLight position={[-10, -10, -10]} intensity={0.5} />\n      <OrbitControls enableZoom={false} autoRotate autoRotateSpeed={0.5} />\n      <DNAStrand />\n    </Canvas>\n  );\n};\n\nexport default DNA;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}