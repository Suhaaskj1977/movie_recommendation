{"ast":null,"code":"var _jsxFileName = \"/Users/vishnuadithya/Documents/Projects/Movie-Site/frontend/src/components/DNA.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useMemo, useRef } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { PerspectiveCamera } from '@react-three/drei';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DNAStrand = ({\n  position,\n  rotation,\n  speed,\n  scale = 1\n}) => {\n  _s();\n  const strandRef = useRef();\n  useFrame(({\n    clock\n  }) => {\n    if (strandRef.current) {\n      strandRef.current.rotation.y = clock.getElapsedTime() * speed;\n      strandRef.current.rotation.z = Math.sin(clock.getElapsedTime() * 0.5) * 0.1;\n    }\n  });\n  const dnaStrand = useMemo(() => {\n    const strand = new THREE.Group();\n\n    // Create a more complex DNA curve\n    const points = [];\n    const segments = 50;\n    for (let i = 0; i <= segments; i++) {\n      const t = i / segments;\n      const angle = t * Math.PI * 4; // 2 full rotations\n      const radius = 2 + Math.sin(t * Math.PI * 8) * 0.5; // Varying radius\n      const x = Math.cos(angle) * radius;\n      const y = (t - 0.5) * 20; // Height\n      const z = Math.sin(angle) * radius;\n      points.push(new THREE.Vector3(x, y, z));\n    }\n    const curve = new THREE.CatmullRomCurve3(points);\n\n    // Main DNA backbone\n    const tubeGeometry = new THREE.TubeGeometry(curve, 100, 0.8, 16, false);\n    const tubeMaterial = new THREE.MeshStandardMaterial({\n      color: 0x4A90E2,\n      transparent: true,\n      opacity: 0.3,\n      metalness: 0.1,\n      roughness: 0.8\n    });\n    const tubeMesh = new THREE.Mesh(tubeGeometry, tubeMaterial);\n    strand.add(tubeMesh);\n\n    // Base pairs (rungs of the ladder)\n    const baseGeometry = new THREE.CylinderGeometry(0.1, 0.1, 4, 8);\n    const baseMaterial = new THREE.MeshStandardMaterial({\n      color: 0x7B68EE,\n      transparent: true,\n      opacity: 0.4,\n      metalness: 0.2,\n      roughness: 0.7\n    });\n    for (let i = 0; i <= 40; i += 2) {\n      const t = i / 40;\n      const position = curve.getPoint(t);\n      const tangent = curve.getTangent(t);\n\n      // Create base pair connector\n      const baseMesh = new THREE.Mesh(baseGeometry, baseMaterial);\n      baseMesh.position.copy(position);\n\n      // Orient the base pair perpendicular to the curve\n      const up = new THREE.Vector3(0, 1, 0);\n      const right = tangent.cross(up).normalize();\n      baseMesh.quaternion.setFromUnitVectors(new THREE.Vector3(0, 1, 0), right);\n      strand.add(baseMesh);\n    }\n\n    // Add some floating particles around the DNA\n    const particleCount = 30;\n    const particleGeometry = new THREE.SphereGeometry(0.2, 8, 8);\n    const particleMaterial = new THREE.MeshStandardMaterial({\n      color: 0x87CEEB,\n      transparent: true,\n      opacity: 0.6\n    });\n    for (let i = 0; i < particleCount; i++) {\n      const particle = new THREE.Mesh(particleGeometry, particleMaterial);\n      const t = i / particleCount;\n      const basePos = curve.getPoint(t);\n      const offset = new THREE.Vector3((Math.random() - 0.5) * 8, (Math.random() - 0.5) * 4, (Math.random() - 0.5) * 8);\n      particle.position.copy(basePos).add(offset);\n      strand.add(particle);\n    }\n    return strand;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"primitive\", {\n    object: dnaStrand,\n    ref: strandRef,\n    position: position,\n    rotation: rotation,\n    scale: scale\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(DNAStrand, \"TIjYphMGfrLSEenLTpbkblyCmOs=\", false, function () {\n  return [useFrame];\n});\n_c = DNAStrand;\nconst DNABackground = () => {\n  _s2();\n  const groupRef = useRef();\n  useFrame(({\n    clock\n  }) => {\n    if (groupRef.current) {\n      groupRef.current.rotation.y = clock.getElapsedTime() * 0.05;\n    }\n  });\n\n  // Create multiple DNA strands for a richer background\n  const dnaStrands = useMemo(() => {\n    const strands = [];\n    const count = 5;\n    for (let i = 0; i < count; i++) {\n      const angle = i / count * Math.PI * 2;\n      const radius = 15 + Math.random() * 10;\n      const x = Math.cos(angle) * radius;\n      const z = Math.sin(angle) * radius;\n      const y = (Math.random() - 0.5) * 10;\n      strands.push({\n        position: [x, y, z],\n        rotation: [0, Math.random() * Math.PI * 2, 0],\n        speed: 0.1 + Math.random() * 0.2,\n        scale: 0.8 + Math.random() * 0.4\n      });\n    }\n    return strands;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: groupRef,\n    children: dnaStrands.map((strand, index) => /*#__PURE__*/_jsxDEV(DNAStrand, {\n      position: strand.position,\n      rotation: strand.rotation,\n      speed: strand.speed,\n      scale: strand.scale\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s2(DNABackground, \"Jih9kfmudfkgTnBabg4z/wLBlSo=\", false, function () {\n  return [useFrame];\n});\n_c2 = DNABackground;\nconst DNA = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      width: '100vw',\n      height: '100vh',\n      zIndex: -1,\n      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'\n    },\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      children: [/*#__PURE__*/_jsxDEV(PerspectiveCamera, {\n        makeDefault: true,\n        position: [0, 0, 50],\n        fov: 60\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"color\", {\n        attach: \"background\",\n        args: ['transparent']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 0.4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n        position: [10, 10, 5],\n        intensity: 0.6\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        position: [0, 0, 20],\n        intensity: 0.3,\n        color: \"#4A90E2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        position: [0, 0, -20],\n        intensity: 0.3,\n        color: \"#7B68EE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DNABackground, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_c3 = DNA;\nexport default DNA;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"DNAStrand\");\n$RefreshReg$(_c2, \"DNABackground\");\n$RefreshReg$(_c3, \"DNA\");","map":{"version":3,"names":["React","useMemo","useRef","Canvas","useFrame","PerspectiveCamera","THREE","jsxDEV","_jsxDEV","DNAStrand","position","rotation","speed","scale","_s","strandRef","clock","current","y","getElapsedTime","z","Math","sin","dnaStrand","strand","Group","points","segments","i","t","angle","PI","radius","x","cos","push","Vector3","curve","CatmullRomCurve3","tubeGeometry","TubeGeometry","tubeMaterial","MeshStandardMaterial","color","transparent","opacity","metalness","roughness","tubeMesh","Mesh","add","baseGeometry","CylinderGeometry","baseMaterial","getPoint","tangent","getTangent","baseMesh","copy","up","right","cross","normalize","quaternion","setFromUnitVectors","particleCount","particleGeometry","SphereGeometry","particleMaterial","particle","basePos","offset","random","object","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","DNABackground","_s2","groupRef","dnaStrands","strands","count","children","map","index","_c2","DNA","style","top","left","width","height","zIndex","background","makeDefault","fov","attach","args","intensity","_c3","$RefreshReg$"],"sources":["/Users/vishnuadithya/Documents/Projects/Movie-Site/frontend/src/components/DNA.js"],"sourcesContent":["import React, { useMemo, useRef } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { PerspectiveCamera } from '@react-three/drei';\nimport * as THREE from 'three';\n\nconst DNAStrand = ({ position, rotation, speed, scale = 1 }) => {\n  const strandRef = useRef();\n\n  useFrame(({ clock }) => {\n    if (strandRef.current) {\n      strandRef.current.rotation.y = clock.getElapsedTime() * speed;\n      strandRef.current.rotation.z = Math.sin(clock.getElapsedTime() * 0.5) * 0.1;\n    }\n  });\n\n  const dnaStrand = useMemo(() => {\n    const strand = new THREE.Group();\n    \n    // Create a more complex DNA curve\n    const points = [];\n    const segments = 50;\n    for (let i = 0; i <= segments; i++) {\n      const t = i / segments;\n      const angle = t * Math.PI * 4; // 2 full rotations\n      const radius = 2 + Math.sin(t * Math.PI * 8) * 0.5; // Varying radius\n      const x = Math.cos(angle) * radius;\n      const y = (t - 0.5) * 20; // Height\n      const z = Math.sin(angle) * radius;\n      points.push(new THREE.Vector3(x, y, z));\n    }\n\n    const curve = new THREE.CatmullRomCurve3(points);\n    \n    // Main DNA backbone\n    const tubeGeometry = new THREE.TubeGeometry(curve, 100, 0.8, 16, false);\n    const tubeMaterial = new THREE.MeshStandardMaterial({\n      color: 0x4A90E2,\n      transparent: true,\n      opacity: 0.3,\n      metalness: 0.1,\n      roughness: 0.8,\n    });\n    const tubeMesh = new THREE.Mesh(tubeGeometry, tubeMaterial);\n    strand.add(tubeMesh);\n\n    // Base pairs (rungs of the ladder)\n    const baseGeometry = new THREE.CylinderGeometry(0.1, 0.1, 4, 8);\n    const baseMaterial = new THREE.MeshStandardMaterial({\n      color: 0x7B68EE,\n      transparent: true,\n      opacity: 0.4,\n      metalness: 0.2,\n      roughness: 0.7,\n    });\n\n    for (let i = 0; i <= 40; i += 2) {\n      const t = i / 40;\n      const position = curve.getPoint(t);\n      const tangent = curve.getTangent(t);\n      \n      // Create base pair connector\n      const baseMesh = new THREE.Mesh(baseGeometry, baseMaterial);\n      baseMesh.position.copy(position);\n      \n      // Orient the base pair perpendicular to the curve\n      const up = new THREE.Vector3(0, 1, 0);\n      const right = tangent.cross(up).normalize();\n      baseMesh.quaternion.setFromUnitVectors(new THREE.Vector3(0, 1, 0), right);\n      \n      strand.add(baseMesh);\n    }\n\n    // Add some floating particles around the DNA\n    const particleCount = 30;\n    const particleGeometry = new THREE.SphereGeometry(0.2, 8, 8);\n    const particleMaterial = new THREE.MeshStandardMaterial({\n      color: 0x87CEEB,\n      transparent: true,\n      opacity: 0.6,\n    });\n\n    for (let i = 0; i < particleCount; i++) {\n      const particle = new THREE.Mesh(particleGeometry, particleMaterial);\n      const t = i / particleCount;\n      const basePos = curve.getPoint(t);\n      const offset = new THREE.Vector3(\n        (Math.random() - 0.5) * 8,\n        (Math.random() - 0.5) * 4,\n        (Math.random() - 0.5) * 8\n      );\n      particle.position.copy(basePos).add(offset);\n      strand.add(particle);\n    }\n\n    return strand;\n  }, []);\n\n  return (\n    <primitive \n      object={dnaStrand} \n      ref={strandRef} \n      position={position}\n      rotation={rotation}\n      scale={scale}\n    />\n  );\n};\n\nconst DNABackground = () => {\n  const groupRef = useRef();\n\n  useFrame(({ clock }) => {\n    if (groupRef.current) {\n      groupRef.current.rotation.y = clock.getElapsedTime() * 0.05;\n    }\n  });\n\n  // Create multiple DNA strands for a richer background\n  const dnaStrands = useMemo(() => {\n    const strands = [];\n    const count = 5;\n    \n    for (let i = 0; i < count; i++) {\n      const angle = (i / count) * Math.PI * 2;\n      const radius = 15 + Math.random() * 10;\n      const x = Math.cos(angle) * radius;\n      const z = Math.sin(angle) * radius;\n      const y = (Math.random() - 0.5) * 10;\n      \n      strands.push({\n        position: [x, y, z],\n        rotation: [0, Math.random() * Math.PI * 2, 0],\n        speed: 0.1 + Math.random() * 0.2,\n        scale: 0.8 + Math.random() * 0.4\n      });\n    }\n    \n    return strands;\n  }, []);\n\n  return (\n    <group ref={groupRef}>\n      {dnaStrands.map((strand, index) => (\n        <DNAStrand\n          key={index}\n          position={strand.position}\n          rotation={strand.rotation}\n          speed={strand.speed}\n          scale={strand.scale}\n        />\n      ))}\n    </group>\n  );\n};\n\nconst DNA = () => {\n  return (\n    <div style={{ \n      position: 'fixed', \n      top: 0, \n      left: 0, \n      width: '100vw', \n      height: '100vh', \n      zIndex: -1,\n      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'\n    }}>\n      <Canvas>\n        <PerspectiveCamera makeDefault position={[0, 0, 50]} fov={60} />\n        \n        {/* Subtle background color */}\n        <color attach=\"background\" args={['transparent']} />\n        \n        {/* Lighting */}\n        <ambientLight intensity={0.4} />\n        <directionalLight position={[10, 10, 5]} intensity={0.6} />\n        <pointLight position={[0, 0, 20]} intensity={0.3} color=\"#4A90E2\" />\n        <pointLight position={[0, 0, -20]} intensity={0.3} color=\"#7B68EE\" />\n        \n        <DNABackground />\n      </Canvas>\n    </div>\n  );\n};\n\nexport default DNA;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}